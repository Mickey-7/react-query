reference : https://www.youtube.com/watch?v=VtWkSCZX0Ec

React Query - library for fetching data in a React app

Why to use React Query
    - since react is UI library, there is no specific pattern for data fetching
    - useEffect hook for data fetching and useState hook to maintain component like loading, error or resulting data
    - if data is needed throughout the app, we tend to use state management libraries
    - most state management libraries are good for working with client state
    - state management libraries are not great for working with asynchronous or server state

Client vs server state
    Client state
    - persisted in your app memory and accessing or updating it is synchronous
    Server state
    - persisted remotely and requires asynchronous APIs for fetching or updating
    - has shared ownership
    - data can be udpated by someone else without your knowledge
    - UI data may not be in sync with remote data
    - challenging when you have to deal with caching, deduping multiple requests for same data,
      updating stale data in the background, performance optimizations etc

Course Content
    - basic queries                             - update data using mutations
    - poll data                                 - invalidate queries
    - rq dev tools                              - optimistic updateds
    - create reusable query hooks               - axios interceptor
    - query by id
    - parallel queries
    - dynamic queries
    - dependent queries
    - infinite & paginated queries


Project Setup : https://www.youtube.com/watch?v=Nm0inP3B_zs
    - new react project using CRA
    - setup an api endpoint that serves mock data for use in out app
    - setup react router and a few routes in app
    - fetch data the traditional way using useEffect and useState

    create db.json file with data
    npm install json-server@0.16.3
    modify package.json - add to scripts
    "serve-json": "json-server --watch db.json --port 4000"

    PS D:\react-query-codevolution> npm run serve-json

    > react-query-codevolution@0.1.0 serve-json
    > json-server --watch db.json --port 4000


    \{^_^}/ hi!

    Loading db.json
    Done

    Resources
    http://localhost:4000/superheroes
    http://localhost:4000/friends
    http://localhost:4000/users
    http://localhost:4000/channels
    http://localhost:4000/colors

    Home
    http://localhost:4000

    Type s + enter at any time to create a snapshot of the database
    Watching...

    npm install react-router-dom axios

    create folder structure below under src
    component
        - Home.page.js
        - SuperHeroes.page.js
        - RQSuperHeroes.page.js

    modify App.js to route the components
    <Router>
      <div>
        <nav>
          <ul>
            <li>
              <Link to='/'>Home</Link>
            </li>
            <li>
              <Link to='/super-heroes'>Traditional Super Heroes</Link>
            </li>
            <li>
              <Link to='/rq-super-heroes'>RQ Super Heroes</Link>
            </li>
          </ul>
        </nav>
        <Routes>
          <Route path='/super-heroes' element={<SuperHeroes />} />
          <Route path='/rq-super-heroes' element={<RQSuperHeroes />} />
          <Route path='/' exact element={<HomePage />} />
        </Routes>
      </div>
    </Router>

    SuperHeroes.page.js
        - implementation of traditional fetching of data with useEffect & useState
            const [isLoading, setIsLoading] = useState(true)
            const [data, setData] = useState([])

            useEffect(() => {
                axios.get('http://localhost:4000/superheroes')
                    .then((response) => {
                        setData(response.data)
                        setIsLoading(false)
                    })
            }, [])

            if (isLoading) {
                return <h2>Loading...</h2>
            }

            return (
                <>
                    <h2>SuperHeroes Page</h2>
                    {
                        data.map(hero => {
                            return <div key={hero.id}>{hero.name}</div>
                        })
                    }
                </>
            )

    open 2 terminal
        - npm run serve-json
        - npm run


Fetching Data with useQuery : https://www.youtube.com/watch?v=Ev60HKYFM0s
    App.js
        import { QueryClient, QueryClientProvider } from 'react-query';

        const queryClient = new QueryClient()

        function App() {
            return (
                <QueryClientProvider client={queryClient}>
                    ...
                </QueryClientProvider>
            )
        }

    RQSuperHeroes.js
        const fetchSuperheroes = () => {
            return axios.get('http://localhost:4000/superheroes')
        }

        export const RQSuperHeroes = () => {
            const { isLoading, data } = useQuery('super-heroes', fetchSuperheroes)
            return (
                <>
                    <h2>RQSuperHeroes Page</h2>
                    {
                        data?.data.map((hero) => {
                            return <div key={hero.id}>{hero.name}</div>
                        })
                    }
                </>
            )
        }

    open 2 terminal
    - npm run serve-json
    - npm run


Handling Query Error : https://www.youtube.com/watch?v=7WrxOLdBW4Y
    SuperHeroes.page.js
        //added for handling error
        const [error, setError] = useState('')

        //added for handling error
        axios
            .get('http://localhost:4000/superheroesdafda')

        //added for handling error
            .catch((error) => {
                setError(error.message)
                setIsLoading(false)
            })

        //added for handling error
        if (error) {
            return <h2>{error}</h2>
        }

    RQSuperHeroes.page.js
        //added for handling error on useQuery
        isError, error

        //added for handling error
        if (isError) {
            return <h2>{error.message}</h2>
        }


React Query Devtools : https://www.youtube.com/watch?v=PJSVowvL2MU
    App.js
        <ReactQueryDevtools initialIsOpen={false} position='bottom-right' />

    npm start then you will notice icon of react query on bottom right of web browser
